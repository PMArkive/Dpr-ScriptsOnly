using UnityEngine;

namespace Dpr
{
	public sealed class ShaderPropertyIDCache
	{
		public static readonly int _AddColorTex = Shader.PropertyToID("_AddColorTex");
		public static readonly int _AlphaClip = Shader.PropertyToID("_AlphaClip");
		public static readonly int _Ambient = Shader.PropertyToID("_Ambient");
		public static readonly int _BackgroundTex = Shader.PropertyToID("_BackgroundTex");
		public static readonly int _BaseColor = Shader.PropertyToID("_BaseColor");
		public static readonly int _BaseColorAddEnable = Shader.PropertyToID("_BaseColorAddEnable");
		public static readonly int _BaseRimValue = Shader.PropertyToID("_BaseRimValue");
		public static readonly int _Bevel = Shader.PropertyToID("_Bevel");
		public static readonly int _BevelClamp = Shader.PropertyToID("_BevelClamp");
		public static readonly int _BevelOffset = Shader.PropertyToID("_BevelOffset");
		public static readonly int _BevelRoundness = Shader.PropertyToID("_BevelRoundness");
		public static readonly int _BevelWidth = Shader.PropertyToID("_BevelWidth");
		public static readonly int _BillboardScale = Shader.PropertyToID("_BillboardScale");
		public static readonly int _Blend0Tex = Shader.PropertyToID("_Blend0Tex");
		public static readonly int _Blend0UVScaleU = Shader.PropertyToID("_Blend0UVScaleU");
		public static readonly int _Blend0UVScaleV = Shader.PropertyToID("_Blend0UVScaleV");
		public static readonly int _Blend0UVTranslateU = Shader.PropertyToID("_Blend0UVTranslateU");
		public static readonly int _Blend0UVTranslateV = Shader.PropertyToID("_Blend0UVTranslateV");
		public static readonly int _Blend1Tex = Shader.PropertyToID("_Blend1Tex");
		public static readonly int _Blend1UVScaleU = Shader.PropertyToID("_Blend1UVScaleU");
		public static readonly int _Blend1UVScaleV = Shader.PropertyToID("_Blend1UVScaleV");
		public static readonly int _Blend1UVTranslateU = Shader.PropertyToID("_Blend1UVTranslateU");
		public static readonly int _Blend1UVTranslateV = Shader.PropertyToID("_Blend1UVTranslateV");
		public static readonly int _BlendFactor = Shader.PropertyToID("_BlendFactor");
		public static readonly int _BlendMode = Shader.PropertyToID("_BlendMode");
		public static readonly int _BlendShadowScale = Shader.PropertyToID("_BlendShadowScale");
		public static readonly int _BlendTex = Shader.PropertyToID("_BlendTex");
		public static readonly int _BlendTex_ProjS = Shader.PropertyToID("_BlendTex_ProjS");
		public static readonly int _BlinkCycle = Shader.PropertyToID("_BlinkCycle");
		public static readonly int _BlinkWidth = Shader.PropertyToID("_BlinkWidth");
		public static readonly int _Bloom = Shader.PropertyToID("_Bloom");
		public static readonly int _BlueOffset = Shader.PropertyToID("_BlueOffset");
		public static readonly int _Blur = Shader.PropertyToID("_Blur");
		public static readonly int _BlurTex = Shader.PropertyToID("_BlurTex");
		public static readonly int _BottomLine = Shader.PropertyToID("_BottomLine");
		public static readonly int _BumpFace = Shader.PropertyToID("_BumpFace");
		public static readonly int _BumpMap = Shader.PropertyToID("_BumpMap");
		public static readonly int _BumpOutline = Shader.PropertyToID("_BumpOutline");
		public static readonly int _BumpScale = Shader.PropertyToID("_BumpScale");
		public static readonly int _BumpTex = Shader.PropertyToID("_BumpTex");
		public static readonly int _Cascade = Shader.PropertyToID("_Cascade");
		public static readonly int _Center = Shader.PropertyToID("_Center");
		public static readonly int _ClipRect = Shader.PropertyToID("_ClipRect");
		public static readonly int _CloudColor = Shader.PropertyToID("_CloudColor");
		public static readonly int _Col0Tex = Shader.PropertyToID("_Col0Tex");
		public static readonly int _Color = Shader.PropertyToID("_Color");
		public static readonly int _ColorBaseU = Shader.PropertyToID("_ColorBaseU");
		public static readonly int _ColorBaseV = Shader.PropertyToID("_ColorBaseV");
		public static readonly int _ColorGradingBlendWeight = Shader.PropertyToID("_ColorGradingBlendWeight");
		public static readonly int _ColorGradingInfluence = Shader.PropertyToID("_ColorGradingInfluence");
		public static readonly int _ColorGradingLUT0 = Shader.PropertyToID("_ColorGradingLUT0");
		public static readonly int _ColorGradingLUT1 = Shader.PropertyToID("_ColorGradingLUT1");
		public static readonly int _ColorIntensity = Shader.PropertyToID("_ColorIntensity");
		public static readonly int _ColorMapUvIndex = Shader.PropertyToID("_ColorMapUvIndex");
		public static readonly int _ColorMask = Shader.PropertyToID("_ColorMask");
		public static readonly int _ColorScale = Shader.PropertyToID("_ColorScale");
		public static readonly int _ComplexTex = Shader.PropertyToID("_ComplexTex");
		public static readonly int _ConstantAlpha = Shader.PropertyToID("_ConstantAlpha");
		public static readonly int _ConstantColor = Shader.PropertyToID("_ConstantColor");
		public static readonly int _ConstantColor0 = Shader.PropertyToID("_ConstantColor0");
		public static readonly int _ConstantColor0Val = Shader.PropertyToID("_ConstantColor0Val");
		public static readonly int _ConstantColorSd0 = Shader.PropertyToID("_ConstantColorSd0");
		public static readonly int _ConstantColorSd0Val = Shader.PropertyToID("_ConstantColorSd0Val");
		public static readonly int _ConstantColorVal = Shader.PropertyToID("_ConstantColorVal");
		public static readonly int _ConstantColorValue = Shader.PropertyToID("_ConstantColorValue");
		public static readonly int _Contrast = Shader.PropertyToID("_Contrast");
		public static readonly int _Cube = Shader.PropertyToID("_Cube");
		public static readonly int _Cull = Shader.PropertyToID("_Cull");
		public static readonly int _CullMode = Shader.PropertyToID("_CullMode");
		public static readonly int _Cutoff = Shader.PropertyToID("_Cutoff");
		public static readonly int _DensityExponential = Shader.PropertyToID("_DensityExponential");
		public static readonly int _Diffuse = Shader.PropertyToID("_Diffuse");
		public static readonly int _DiffusePower = Shader.PropertyToID("_DiffusePower");
		public static readonly int _DiscardValue = Shader.PropertyToID("_DiscardValue");
		public static readonly int _DitherMaskValue = Shader.PropertyToID("_DitherMaskValue");
		public static readonly int _DstBlend = Shader.PropertyToID("_DstBlend");
		public static readonly int _EmissionColor = Shader.PropertyToID("_EmissionColor");
		public static readonly int _EmissionColorIntensity = Shader.PropertyToID("_EmissionColorIntensity");
		public static readonly int _EmissionMaskTex = Shader.PropertyToID("_EmissionMaskTex");
		public static readonly int _EmissionMaskUse = Shader.PropertyToID("_EmissionMaskUse");
		public static readonly int _EmissionMaskVal = Shader.PropertyToID("_EmissionMaskVal");
		public static readonly int _EmissionOffTime = Shader.PropertyToID("_EmissionOffTime");
		public static readonly int _EmissionOnTime = Shader.PropertyToID("_EmissionOnTime");
		public static readonly int _EmissionTex = Shader.PropertyToID("_EmissionTex");
		public static readonly int _EnvironmentMapEnable = Shader.PropertyToID("_EnvironmentMapEnable");
		public static readonly int _EnvMatrixRotation = Shader.PropertyToID("_EnvMatrixRotation");
		public static readonly int _FaceColor = Shader.PropertyToID("_FaceColor");
		public static readonly int _FaceDilate = Shader.PropertyToID("_FaceDilate");
		public static readonly int _FaceShininess = Shader.PropertyToID("_FaceShininess");
		public static readonly int _FaceTex = Shader.PropertyToID("_FaceTex");
		public static readonly int _FaceUVSpeedX = Shader.PropertyToID("_FaceUVSpeedX");
		public static readonly int _FaceUVSpeedY = Shader.PropertyToID("_FaceUVSpeedY");
		public static readonly int _FarCloudSpeed = Shader.PropertyToID("_FarCloudSpeed");
		public static readonly int _FarCloudTex = Shader.PropertyToID("_FarCloudTex");
		public static readonly int _FarColor = Shader.PropertyToID("_FarColor");
		public static readonly int _FireTex = Shader.PropertyToID("_FireTex");
		public static readonly int _FixMultiplierColor = Shader.PropertyToID("_FixMultiplierColor");
		public static readonly int _FlipZWrite = Shader.PropertyToID("_FlipZWrite");
		public static readonly int _FlowMap = Shader.PropertyToID("_FlowMap");
		public static readonly int _FlowSpeed = Shader.PropertyToID("_FlowSpeed");
		public static readonly int _FogMode = Shader.PropertyToID("_FogMode");
		public static readonly int _FogParam = Shader.PropertyToID("_FogParam");
		public static readonly int _FresnelFalloff = Shader.PropertyToID("_FresnelFalloff");
		public static readonly int _FresnelPower = Shader.PropertyToID("_FresnelPower");
		public static readonly int _Gamma = Shader.PropertyToID("_Gamma");
		public static readonly int _GlowColor = Shader.PropertyToID("_GlowColor");
		public static readonly int _GlowInner = Shader.PropertyToID("_GlowInner");
		public static readonly int _GlowOffset = Shader.PropertyToID("_GlowOffset");
		public static readonly int _GlowOuter = Shader.PropertyToID("_GlowOuter");
		public static readonly int _GlowPower = Shader.PropertyToID("_GlowPower");
		public static readonly int _GourndEffectMaskTex = Shader.PropertyToID("_GourndEffectMaskTex");
		public static readonly int _GradientScale = Shader.PropertyToID("_GradientScale");
		public static readonly int _Grading = Shader.PropertyToID("_Grading");
		public static readonly int _GreenOffset = Shader.PropertyToID("_GreenOffset");
		public static readonly int _GroundEffectCol = Shader.PropertyToID("_GroundEffectCol");
		public static readonly int _Intensity = Shader.PropertyToID("_Intensity");
		public static readonly int _L1AddColor0 = Shader.PropertyToID("_L1AddColor0");
		public static readonly int _L1AddColor0Val = Shader.PropertyToID("_L1AddColor0Val");
		public static readonly int _L1Col0Tex = Shader.PropertyToID("_L1Col0Tex");
		public static readonly int _L1ConstantColor0 = Shader.PropertyToID("_L1ConstantColor0");
		public static readonly int _L1ConstantColor0Val = Shader.PropertyToID("_L1ConstantColor0Val");
		public static readonly int _L1ConstantColorSd0 = Shader.PropertyToID("_L1ConstantColorSd0");
		public static readonly int _L1ConstantColorSd0Val = Shader.PropertyToID("_L1ConstantColorSd0Val");
		public static readonly int _Layer1BaseU = Shader.PropertyToID("_Layer1BaseU");
		public static readonly int _Layer1BaseV = Shader.PropertyToID("_Layer1BaseV");
		public static readonly int _Layer1Enable = Shader.PropertyToID("_Layer1Enable");
		public static readonly int _Layer1OverLerpValue = Shader.PropertyToID("_Layer1OverLerpValue");
		public static readonly int _Layer1UvIndex = Shader.PropertyToID("_Layer1UvIndex");
		public static readonly int _LayerBumpScale = Shader.PropertyToID("_LayerBumpScale");
		public static readonly int _LayerBumpTex = Shader.PropertyToID("_LayerBumpTex");
		public static readonly int _LayerCalcMulti = Shader.PropertyToID("_LayerCalcMulti");
		public static readonly int _LayerColor = Shader.PropertyToID("_LayerColor");
		public static readonly int _LayerColorIntensity = Shader.PropertyToID("_LayerColorIntensity");
		public static readonly int _LayerComplexTex = Shader.PropertyToID("_LayerComplexTex");
		public static readonly int _LayerFresnelPower = Shader.PropertyToID("_LayerFresnelPower");
		public static readonly int _LayerReflectivity = Shader.PropertyToID("_LayerReflectivity");
		public static readonly int _LayerRimValue = Shader.PropertyToID("_LayerRimValue");
		public static readonly int _LayerSpecularColor = Shader.PropertyToID("_LayerSpecularColor");
		public static readonly int _LayerSpecularCosinePower = Shader.PropertyToID("_LayerSpecularCosinePower");
		public static readonly int _LayerSpecularIntensity = Shader.PropertyToID("_LayerSpecularIntensity");
		public static readonly int _LayerTex = Shader.PropertyToID("_LayerTex");
		public static readonly int _LayerTex_ProjS = Shader.PropertyToID("_LayerTex_ProjS");
		public static readonly int _LerpPow = Shader.PropertyToID("_LerpPow");
		public static readonly int _LerpTex = Shader.PropertyToID("_LerpTex");
		public static readonly int _LightAngle = Shader.PropertyToID("_LightAngle");
		public static readonly int _LightColorValue = Shader.PropertyToID("_LightColorValue");
		public static readonly int _LowerColor = Shader.PropertyToID("_LowerColor");
		public static readonly int _MainTex = Shader.PropertyToID("_MainTex");
		public static readonly int _MainTex_ProjS = Shader.PropertyToID("_MainTex_ProjS");
		public static readonly int _Mask0Tex = Shader.PropertyToID("_Mask0Tex");
		public static readonly int _Mask0UVScaleU = Shader.PropertyToID("_Mask0UVScaleU");
		public static readonly int _Mask0UVScaleV = Shader.PropertyToID("_Mask0UVScaleV");
		public static readonly int _Mask0UVTranslateU = Shader.PropertyToID("_Mask0UVTranslateU");
		public static readonly int _Mask0UVTranslateV = Shader.PropertyToID("_Mask0UVTranslateV");
		public static readonly int _Mask1Tex = Shader.PropertyToID("_Mask1Tex");
		public static readonly int _Mask1UVScaleU = Shader.PropertyToID("_Mask1UVScaleU");
		public static readonly int _Mask1UVScaleV = Shader.PropertyToID("_Mask1UVScaleV");
		public static readonly int _Mask1UVTranslateU = Shader.PropertyToID("_Mask1UVTranslateU");
		public static readonly int _Mask1UVTranslateV = Shader.PropertyToID("_Mask1UVTranslateV");
		public static readonly int _MaskAddValue = Shader.PropertyToID("_MaskAddValue");
		public static readonly int _MaskCoord = Shader.PropertyToID("_MaskCoord");
		public static readonly int _MaskEdgeColor = Shader.PropertyToID("_MaskEdgeColor");
		public static readonly int _MaskEdgeSoftness = Shader.PropertyToID("_MaskEdgeSoftness");
		public static readonly int _MaskInverse = Shader.PropertyToID("_MaskInverse");
		public static readonly int _MaskShadowBlendWeight = Shader.PropertyToID("_MaskShadowBlendWeight");
		public static readonly int _MaskShadowExponential = Shader.PropertyToID("_MaskShadowExponential");
		public static readonly int _MaskShadowPower = Shader.PropertyToID("_MaskShadowPower");
		public static readonly int _MaskSoftnessX = Shader.PropertyToID("_MaskSoftnessX");
		public static readonly int _MaskSoftnessY = Shader.PropertyToID("_MaskSoftnessY");
		public static readonly int _MaskTex = Shader.PropertyToID("_MaskTex");
		public static readonly int _MaskUVScale = Shader.PropertyToID("_MaskUVScale");
		public static readonly int _MaskWipeControl = Shader.PropertyToID("_MaskWipeControl");
		public static readonly int _MaxDensity = Shader.PropertyToID("_MaxDensity");
		public static readonly int _Mode = Shader.PropertyToID("_Mode");
		public static readonly int _NearCloudSpeed = Shader.PropertyToID("_NearCloudSpeed");
		public static readonly int _NearCloudTex = Shader.PropertyToID("_NearCloudTex");
		public static readonly int _NoDrawEnd = Shader.PropertyToID("_NoDrawEnd");
		public static readonly int _NoDrawSta = Shader.PropertyToID("_NoDrawSta");
		public static readonly int _NoiseScale = Shader.PropertyToID("_NoiseScale");
		public static readonly int _NoiseTex = Shader.PropertyToID("_NoiseTex");
		public static readonly int _NormalMap = Shader.PropertyToID("_NormalMap");
		public static readonly int _NormalMapTex = Shader.PropertyToID("_NormalMapTex");
		public static readonly int _NumSamples = Shader.PropertyToID("_NumSamples");
		public static readonly int _OutlineColor = Shader.PropertyToID("_OutlineColor");
		public static readonly int _OutlineShininess = Shader.PropertyToID("_OutlineShininess");
		public static readonly int _OutlineSoftness = Shader.PropertyToID("_OutlineSoftness");
		public static readonly int _OutlineTex = Shader.PropertyToID("_OutlineTex");
		public static readonly int _OutlineUVSpeedX = Shader.PropertyToID("_OutlineUVSpeedX");
		public static readonly int _OutlineUVSpeedY = Shader.PropertyToID("_OutlineUVSpeedY");
		public static readonly int _OutlineWidth = Shader.PropertyToID("_OutlineWidth");
		public static readonly int _Padding = Shader.PropertyToID("_Padding");
		public static readonly int _PatternH = Shader.PropertyToID("_PatternH");
		public static readonly int _PatternV = Shader.PropertyToID("_PatternV");
		public static readonly int _PerspectiveFilter = Shader.PropertyToID("_PerspectiveFilter");
		public static readonly int _PokemonStencil = Shader.PropertyToID("_PokemonStencil");
		public static readonly int _PowTrans = Shader.PropertyToID("_PowTrans");
		public static readonly int _PrimaryColor = Shader.PropertyToID("_PrimaryColor");
		public static readonly int _RangeEnd = Shader.PropertyToID("_RangeEnd");
		public static readonly int _RangeSta = Shader.PropertyToID("_RangeSta");
		public static readonly int _RedOffset = Shader.PropertyToID("_RedOffset");
		public static readonly int _ReflectFaceColor = Shader.PropertyToID("_ReflectFaceColor");
		public static readonly int _ReflectionBias = Shader.PropertyToID("_ReflectionBias");
		public static readonly int _ReflectionOffsetScale = Shader.PropertyToID("_ReflectionOffsetScale");
		public static readonly int _Reflectivity = Shader.PropertyToID("_Reflectivity");
		public static readonly int _ReflectOutlineColor = Shader.PropertyToID("_ReflectOutlineColor");
		public static readonly int _RefractionScale = Shader.PropertyToID("_RefractionScale");
		public static readonly int _RimBlendWeight = Shader.PropertyToID("_RimBlendWeight");
		public static readonly int _RimColor = Shader.PropertyToID("_RimColor");
		public static readonly int _RimColorShadow = Shader.PropertyToID("_RimColorShadow");
		public static readonly int _RimColorValue = Shader.PropertyToID("_RimColorValue");
		public static readonly int _RimMaskEnable = Shader.PropertyToID("_RimMaskEnable");
		public static readonly int _RimPower = Shader.PropertyToID("_RimPower");
		public static readonly int _RimStrength = Shader.PropertyToID("_RimStrength");
		public static readonly int _Rounded = Shader.PropertyToID("_Rounded");
		public static readonly int _Roundness = Shader.PropertyToID("_Roundness");
		public static readonly int _ScaleRatioA = Shader.PropertyToID("_ScaleRatioA");
		public static readonly int _ScaleRatioB = Shader.PropertyToID("_ScaleRatioB");
		public static readonly int _ScaleRatioC = Shader.PropertyToID("_ScaleRatioC");
		public static readonly int _ScaleX = Shader.PropertyToID("_ScaleX");
		public static readonly int _ScaleY = Shader.PropertyToID("_ScaleY");
		public static readonly int _SceneryColor = Shader.PropertyToID("_SceneryColor");
		public static readonly int _SceneryDepthTex = Shader.PropertyToID("_SceneryDepthTex");
		public static readonly int _SceneryTex = Shader.PropertyToID("_SceneryTex");
		public static readonly int _ScreenOffset = Shader.PropertyToID("_ScreenOffset");
		public static readonly int _SecondaryColor = Shader.PropertyToID("_SecondaryColor");
		public static readonly int _ShaderFlags = Shader.PropertyToID("_ShaderFlags");
		public static readonly int _ShadowColor = Shader.PropertyToID("_ShadowColor");
		public static readonly int _Sharpness = Shader.PropertyToID("_Sharpness");
		public static readonly int _ShiftColor = Shader.PropertyToID("_ShiftColor");
		public static readonly int _ShiftColorScale = Shader.PropertyToID("_ShiftColorScale");
		public static readonly int _SkinColor = Shader.PropertyToID("_SkinColor");
		public static readonly int _SkyColor = Shader.PropertyToID("_SkyColor");
		public static readonly int _Smoothness = Shader.PropertyToID("_Smoothness");
		public static readonly int _SpecColor = Shader.PropertyToID("_SpecColor");
		public static readonly int _SpecularColor = Shader.PropertyToID("_SpecularColor");
		public static readonly int _SpecularCosinePower = Shader.PropertyToID("_SpecularCosinePower");
		public static readonly int _SpecularIntensity = Shader.PropertyToID("_SpecularIntensity");
		public static readonly int _SpecularMaskEnable = Shader.PropertyToID("_SpecularMaskEnable");
		public static readonly int _SpecularPower = Shader.PropertyToID("_SpecularPower");
		public static readonly int _SpecularScale = Shader.PropertyToID("_SpecularScale");
		public static readonly int _SphereMapColor = Shader.PropertyToID("_SphereMapColor");
		public static readonly int _SphereMapColorVal = Shader.PropertyToID("_SphereMapColorVal");
		public static readonly int _SphereMapTex = Shader.PropertyToID("_SphereMapTex");
		public static readonly int _SphereMaskEnable = Shader.PropertyToID("_SphereMaskEnable");
		public static readonly int _SrcBlend = Shader.PropertyToID("_SrcBlend");
		public static readonly int _Stencil = Shader.PropertyToID("_Stencil");
		public static readonly int _StencilComp = Shader.PropertyToID("_StencilComp");
		public static readonly int _StencilFail = Shader.PropertyToID("_StencilFail");
		public static readonly int _StencilOp = Shader.PropertyToID("_StencilOp");
		public static readonly int _StencilPass = Shader.PropertyToID("_StencilPass");
		public static readonly int _StencilReadMask = Shader.PropertyToID("_StencilReadMask");
		public static readonly int _StencilRef = Shader.PropertyToID("_StencilRef");
		public static readonly int _StencilWriteMask = Shader.PropertyToID("_StencilWriteMask");
		public static readonly int _StencilZFail = Shader.PropertyToID("_StencilZFail");
		public static readonly int _SubsurfaceAdditionalColor = Shader.PropertyToID("_SubsurfaceAdditionalColor");
		public static readonly int _SubsurfaceBlendWeight = Shader.PropertyToID("_SubsurfaceBlendWeight");
		public static readonly int _SubsurfaceExponential = Shader.PropertyToID("_SubsurfaceExponential");
		public static readonly int _SubsurfaceFalloff = Shader.PropertyToID("_SubsurfaceFalloff");
		public static readonly int _SwingDistribution = Shader.PropertyToID("_SwingDistribution");
		public static readonly int _SwingEnable = Shader.PropertyToID("_SwingEnable");
		public static readonly int _SwingPower = Shader.PropertyToID("_SwingPower");
		public static readonly int _SwingScale = Shader.PropertyToID("_SwingScale");
		public static readonly int _SwingSpeed = Shader.PropertyToID("_SwingSpeed");
		public static readonly int _SwingUV = Shader.PropertyToID("_SwingUV");
		public static readonly int _SwitchEmissionMaskTexUV = Shader.PropertyToID("_SwitchEmissionMaskTexUV");
		public static readonly int _SwitchingTime = Shader.PropertyToID("_SwitchingTime");
		public static readonly int _SwitchPriority = Shader.PropertyToID("_SwitchPriority");
		public static readonly int _TextureHeight = Shader.PropertyToID("_TextureHeight");
		public static readonly int _TextureWidth = Shader.PropertyToID("_TextureWidth");
		public static readonly int _TexVelocity = Shader.PropertyToID("_TexVelocity");
		public static readonly int _TopLine = Shader.PropertyToID("_TopLine");
		public static readonly int _TopLineScale = Shader.PropertyToID("_TopLineScale");
		public static readonly int _TransDistance = Shader.PropertyToID("_TransDistance");
		public static readonly int _UnderlayColor = Shader.PropertyToID("_UnderlayColor");
		public static readonly int _UnderlayDilate = Shader.PropertyToID("_UnderlayDilate");
		public static readonly int _UnderlayOffsetX = Shader.PropertyToID("_UnderlayOffsetX");
		public static readonly int _UnderlayOffsetY = Shader.PropertyToID("_UnderlayOffsetY");
		public static readonly int _UnderlaySoftness = Shader.PropertyToID("_UnderlaySoftness");
		public static readonly int _UpperColor = Shader.PropertyToID("_UpperColor");
		public static readonly int _UseUIAlphaClip = Shader.PropertyToID("_UseUIAlphaClip");
		public static readonly int _UVSwap = Shader.PropertyToID("_UVSwap");
		public static readonly int _VertexOffsetX = Shader.PropertyToID("_VertexOffsetX");
		public static readonly int _VertexOffsetY = Shader.PropertyToID("_VertexOffsetY");
		public static readonly int _WaterColor = Shader.PropertyToID("_WaterColor");
		public static readonly int _WaveColor = Shader.PropertyToID("_WaveColor");
		public static readonly int _WaveTex01 = Shader.PropertyToID("_WaveTex01");
		public static readonly int _WaveTex02 = Shader.PropertyToID("_WaveTex02");
		public static readonly int _WeightBold = Shader.PropertyToID("_WeightBold");
		public static readonly int _WeightNormal = Shader.PropertyToID("_WeightNormal");
		public static readonly int _ZOffset = Shader.PropertyToID("_ZOffset");
		public static readonly int _ZTest = Shader.PropertyToID("_ZTest");
		public static readonly int _ZWrite = Shader.PropertyToID("_ZWrite");
		public static readonly int MASK_CALC_MODE = Shader.PropertyToID("MASK_CALC_MODE");
		public static readonly int MASK_FIRST_UV = Shader.PropertyToID("MASK_FIRST_UV");
		public static readonly int MASK_SECOND_UV = Shader.PropertyToID("MASK_SECOND_UV");
		public static readonly int PixelSnap = Shader.PropertyToID("PixelSnap");
	}
}